; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29334.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__D4FFF41D_pch@h DB 01H
__C239039F_Free64@GetCPUID@pch DB 01H
__AA8473D0_dllmain@cpp DB 01H
__36D369CD_pch@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	?GetInstructionSet@@YA_NXZ			; GetInstructionSet
PUBLIC	?Test@@YAHXZ					; Test
PUBLIC	__JustMyCode_Default
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetInstructionSet@@YA_NXZ DD imagerel $LN13
	DD	imagerel $LN13+1503
	DD	imagerel $unwind$?GetInstructionSet@@YA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Test@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?Test@@YAHXZ
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Test@@YAHXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetInstructionSet@@YA_NXZ DD 025063019H
	DD	010b2310H
	DD	07004002aH
	DD	050023003H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?GetInstructionSet@@YA_NXZ$rtcName$0 DB 077H		; GetInstructionSet
	DB	065H
	DB	072H
	DB	065H
	DB	074H
	DB	075H
	DB	072H
	DB	06eH
	DB	00H
	ORG $+3
?GetInstructionSet@@YA_NXZ$rtcName$1 DB 063H		; GetInstructionSet
	DB	069H
	DB	00H
	ORG $+1
?GetInstructionSet@@YA_NXZ$rtcVarDesc DD 068H		; GetInstructionSet
	DD	010H
	DQ	FLAT:?GetInstructionSet@@YA_NXZ$rtcName$1
	DD	028H
	DD	023H
	DQ	FLAT:?GetInstructionSet@@YA_NXZ$rtcName$0
	ORG $+96
?GetInstructionSet@@YA_NXZ$rtcFrameData DD 02H		; GetInstructionSet
	DD	00H
	DQ	FLAT:?GetInstructionSet@@YA_NXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Emil\Desktop\free64\Free64.GetCPUID\dllmain.cpp
;	COMDAT ?Test@@YAHXZ
_TEXT	SEGMENT
?Test@@YAHXZ PROC					; Test, COMDAT

; 57   : int Test() {

$LN3:
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__AA8473D0_dllmain@cpp
	call	__CheckForDebuggerJustMyCode

; 58   : 	return 5;

	mov	eax, 5

; 59   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?Test@@YAHXZ ENDP					; Test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Emil\Desktop\free64\Free64.GetCPUID\dllmain.cpp
;	COMDAT ?GetInstructionSet@@YA_NXZ
_TEXT	SEGMENT
wereturn$ = 8
ci$ = 72
tv362 = 292
tv196 = 292
tv157 = 292
tv132 = 292
tv90 = 292
__$ArrayPad$ = 296
?GetInstructionSet@@YA_NXZ PROC				; GetInstructionSet, COMDAT

; 9    : bool GetInstructionSet() {

$LN13:
	push	rbp
	push	rbx
	push	rdi
	sub	rsp, 336				; 00000150H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__AA8473D0_dllmain@cpp
	call	__CheckForDebuggerJustMyCode

; 10   : 	bool wereturn[35];
; 11   : 	int ci[4];
; 12   : 	
; 13   : 	__cpuid(ci, 1);

	mov	eax, 1
	xor	ecx, ecx
	cpuid
	lea	r8, QWORD PTR ci$[rbp]
	mov	DWORD PTR [r8], eax
	mov	DWORD PTR [r8+4], ebx
	mov	DWORD PTR [r8+8], ecx
	mov	DWORD PTR [r8+12], edx

; 14   : 		wereturn[0] = (ci[EDX] >> 23 & 1); //MMX

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 23
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 15   : 		wereturn[1] = (ci[EDX] >> 25 & 1); //SSE

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 25
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 16   : 		wereturn[2] = (ci[EDX] >> 26 & ci[EDX] >> 19); //SSE2

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 26
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	ecx, DWORD PTR ci$[rbp+rcx]
	sar	ecx, 19
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN3@GetInstruc
	mov	BYTE PTR tv90[rbp], 1
	jmp	SHORT $LN4@GetInstruc
$LN3@GetInstruc:
	mov	BYTE PTR tv90[rbp], 0
$LN4@GetInstruc:
	mov	eax, 1
	imul	rax, rax, 2
	movzx	ecx, BYTE PTR tv90[rbp]
	mov	BYTE PTR wereturn$[rbp+rax], cl

; 17   : 		wereturn[3] = (ci[ECX] & ci[ECX] >> 3); //SSE3

	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	ecx, DWORD PTR ci$[rbp+rcx]
	sar	ecx, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN5@GetInstruc
	mov	BYTE PTR tv132[rbp], 1
	jmp	SHORT $LN6@GetInstruc
$LN5@GetInstruc:
	mov	BYTE PTR tv132[rbp], 0
$LN6@GetInstruc:
	mov	eax, 1
	imul	rax, rax, 3
	movzx	ecx, BYTE PTR tv132[rbp]
	mov	BYTE PTR wereturn$[rbp+rax], cl

; 18   : 		wereturn[4] = (ci[ECX] >> 9 & 1); //SSSE3

	mov	eax, 4
	imul	rax, rax, 2
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 9
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 4
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 19   : 		wereturn[5] = (ci[ECX] >> 19 & 1); //SSE4.1

	mov	eax, 4
	imul	rax, rax, 2
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 19
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 5
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 20   : 		wereturn[6] = (ci[ECX] >> 20 & ci[ECX] >> 23); //SSE4.2

	mov	eax, 4
	imul	rax, rax, 2
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 20
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	ecx, DWORD PTR ci$[rbp+rcx]
	sar	ecx, 23
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN7@GetInstruc
	mov	BYTE PTR tv157[rbp], 1
	jmp	SHORT $LN8@GetInstruc
$LN7@GetInstruc:
	mov	BYTE PTR tv157[rbp], 0
$LN8@GetInstruc:
	mov	eax, 1
	imul	rax, rax, 6
	movzx	ecx, BYTE PTR tv157[rbp]
	mov	BYTE PTR wereturn$[rbp+rax], cl

; 21   : 		wereturn[7] = (ci[ECX] >> 28 & 1); //AVX

	mov	eax, 4
	imul	rax, rax, 2
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 28
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 7
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 22   : 		wereturn[8] = (ci[ECX] >> 5 & 1); //VMX	

	mov	eax, 4
	imul	rax, rax, 2
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 5
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 8
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 23   : 		wereturn[9] = (ci[ECX] >> 6 & 1); //SMX

	mov	eax, 4
	imul	rax, rax, 2
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 6
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 9
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 24   : 		wereturn[10] = (ci[ECX] >> 7 & 1); //EIST

	mov	eax, 4
	imul	rax, rax, 2
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 7
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 10
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 25   : 		wereturn[11] = (ci[ECX] >> 8 & ci[EDX] >> 29); //Thermal Monitor 2

	mov	eax, 4
	imul	rax, rax, 2
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 8
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	ecx, DWORD PTR ci$[rbp+rcx]
	sar	ecx, 29
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN9@GetInstruc
	mov	BYTE PTR tv196[rbp], 1
	jmp	SHORT $LN10@GetInstruc
$LN9@GetInstruc:
	mov	BYTE PTR tv196[rbp], 0
$LN10@GetInstruc:
	mov	eax, 1
	imul	rax, rax, 11
	movzx	ecx, BYTE PTR tv196[rbp]
	mov	BYTE PTR wereturn$[rbp+rax], cl

; 26   : 		wereturn[12] = (ci[ECX] >> 12 & 1); //FMA3

	mov	eax, 4
	imul	rax, rax, 2
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 12
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 12
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 27   : 		wereturn[13] = (ci[ECX] >> 25 & 1); //AES

	mov	eax, 4
	imul	rax, rax, 2
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 25
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 13
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 28   : 		wereturn[14] = (ci[EDX] & 1); //CPU has FPU

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 14
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 29   : 		wereturn[15] = (ci[EDX] >> 1 & 1); //VME

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 1
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 15
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 30   : 		wereturn[16] = (ci[EDX] >> 3 & 1); //PSE

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 3
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 16
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 31   : 		wereturn[17] = (ci[EDX] >> 4 & 1); //TSC

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 4
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 17
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 32   : 		wereturn[18] = (ci[EDX] >> 5 & 1); //MSR

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 5
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 18
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 33   : 		wereturn[19] = (ci[EDX] >> 6 & 1); //Physical Address Extension

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 6
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 19
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 34   : 		wereturn[20] = (ci[EDX] >> 7 & 1); //MCE

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 7
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 20
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 35   : 		wereturn[21] = (ci[EDX] >> 9 & 1); //APIC

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 9
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 21
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 36   : 		wereturn[22] = (ci[EDX] >> 12 & 1); //MTRR

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 12
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 22
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 37   : 		wereturn[23] = (ci[EDX] >> 13 & 1); //PGE

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 13
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 23
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 38   : 		wereturn[24] = (ci[EDX] >> 14 & 1); //MCA

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 14
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 24
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 39   : 		wereturn[25] = (ci[EDX] >> 15 & 1); //CMOV

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 15
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 25
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 40   : 		wereturn[26] = (ci[EDX] >> 17 & 1); //PSE-36

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 17
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 26
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 41   : 		wereturn[27] = (ci[EDX] >> 27 & 1); //Self-Snoop

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 27
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 27
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 42   : 		wereturn[28] = (ci[EDX] >> 31 & 1); //PBE

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 31
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 28
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 43   : 
; 44   : 	__cpuid(ci, 7);

	mov	eax, 7
	xor	ecx, ecx
	cpuid
	lea	r8, QWORD PTR ci$[rbp]
	mov	DWORD PTR [r8], eax
	mov	DWORD PTR [r8+4], ebx
	mov	DWORD PTR [r8+8], ecx
	mov	DWORD PTR [r8+12], edx

; 45   : 		wereturn[29] = (ci[EBX] >> 5 & 1); //AVX2

	mov	eax, 4
	imul	rax, rax, 1
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 5
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 29
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 46   : 		wereturn[30] = (ci[EBX] >> 29 & 1); //SHA

	mov	eax, 4
	imul	rax, rax, 1
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 29
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 30
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 47   : 
; 48   : 	__cpuid(ci, 0x80000001);

	mov	eax, -2147483647			; ffffffff80000001H
	xor	ecx, ecx
	cpuid
	lea	r8, QWORD PTR ci$[rbp]
	mov	DWORD PTR [r8], eax
	mov	DWORD PTR [r8+4], ebx
	mov	DWORD PTR [r8+8], ecx
	mov	DWORD PTR [r8+12], edx

; 49   : 		wereturn[31] = (ci[EDX] >> 22 & 1); //MMXplus

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 22
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 31
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 50   : 		wereturn[32] = (ci[EDX] >> 31 & 1); //3DNow!

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 31
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 32				; 00000020H
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 51   : 		wereturn[33] = (ci[EDX] >> 30 & 1); //Extended 3dNow!

	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 30
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 33				; 00000021H
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 52   : 		wereturn[34] = (ci[ECX] >> 6 & 1); //SSE4A

	mov	eax, 4
	imul	rax, rax, 2
	mov	eax, DWORD PTR ci$[rbp+rax]
	sar	eax, 6
	and	eax, 1
	mov	ecx, 1
	imul	rcx, rcx, 34				; 00000022H
	mov	BYTE PTR wereturn$[rbp+rcx], al

; 53   : 
; 54   : 	return wereturn;

	lea	rax, QWORD PTR wereturn$[rbp]
	test	rax, rax
	je	SHORT $LN11@GetInstruc
	mov	BYTE PTR tv362[rbp], 1
	jmp	SHORT $LN12@GetInstruc
$LN11@GetInstruc:
	mov	BYTE PTR tv362[rbp], 0
$LN12@GetInstruc:
	movzx	eax, BYTE PTR tv362[rbp]

; 55   : }

	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?GetInstructionSet@@YA_NXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+304]
	pop	rdi
	pop	rbx
	pop	rbp
	ret	0
?GetInstructionSet@@YA_NXZ ENDP				; GetInstructionSet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Emil\Desktop\free64\Free64.GetCPUID\dllmain.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__AA8473D0_dllmain@cpp
	call	__CheckForDebuggerJustMyCode
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Emil\Desktop\free64\Free64.GetCPUID\dllmain.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__AA8473D0_dllmain@cpp
	call	__CheckForDebuggerJustMyCode
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
